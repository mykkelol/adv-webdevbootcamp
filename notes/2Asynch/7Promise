' Promise
    - an object that represents a task that will be completed in the future
    
    - see code of a non-asynchronus example:
        var p1 = new Promise(function(resolve, reject) {
            var num = Math.random();
                if (num < 0.5) {
                    resolve(num);
                } else {
                    reject(num);
            }
        });
        
        p1.then(function(result) {
            console.log("Success:", result);
        }).catch(function(error) {
            console.log("Error:", error);
        });
        
    - see code of an asynchronus example:
    
        var promise = new Promise(function(resolve, reject) {
            setTimeout(function() {
                var randomInt = Math.floor(Math.random() * 10);
                resolve(randomInt);
            }, 4000);
        });
        
        promise.then(function(data) {
            console.log("Random int passed to resolve:",
               data);
        });
        
        + in this code example, the promise gets executed immediately but the console.log comes only after the number is generated in the setTimeout
        
        
' Promise Chaining
    
    - see code:
        var promise = new Promise(function(resolve, reject) {
            resolve(5);
        });
        
        promise.then(function(data) {
            return data * 2;
        }).then(function(data) {
            return data + 20;
        }).then(function(data) {
            console.log(data);
        });