    - it's a more efficient way to layout, align and distribute space among items in containers
        - think grid, but systematically internal within CSS now
        - you can do all of this without knowing the size
        
    - flex containers
        - the container that contains display: flex
    - flex items
        - anything inside the container like the divs
    - main axis vs cross axis
        - main axis is not always left and right,
        it's the main direction in which the items float
        - when the container cant fill the item, it flows top to bottom
        and when it does that--you have a cross axis
        
    - flex-direction (row, row-reverse, column, column-reverse)
        - want main-axis to go left to right or top to bottom
        - row is default value which is left to right
        - row-reverse is right to left
        - column is top to bottom and reverse would be column-reverse

    - flex-wrap (nowrap, wrap, wrap-reverse)
        - force items to be in one line or multiple lines
        to have items be their own size
        -wrap-reverse can be used when row-reverse fails
        - wrap reverse will reverse from the absolute bottom of the wrap
        
    - justify-content
        - how space is distributed between items in flex containers acrosses the MAIN AXIS
        - flex-start, flex-end (go to end of main axis), center (center all), 
        - space-between (evenly space items), space-around (space items based on its sides)
    
    - align-items
        - how space is distributed between items in flex containers along the CROSS AXIS
        - flex-start, flex-end, stretch (DEFAULT--taking entire space), center, baseline (text in items are inline)
        
    - align-content
        - how space is distributed between ROWS in flex containers along the CROSS AXIS
        - stretch, flex-start, flex-end, space-between, space-around, center;
        
    - align-self
        - override align-items on individual flex-items
        - flex-end, flex-start, stretch
        
    - order
        - specifies order used to lay out items in their flex container
        - 0 (default)
        - e.g. move div 4 to the front of all divs within a container
        
    - flex
        - how a flex item grow or shrink based on available space in the flex container
        - flex-basis (the ideal height/width depending on column/row)
        - flex-grow (how unused space should be spread among flexed items)
            - largely dependent on ratio so the value is almost arbitary. you can start at flex-grow: 1 if you'd like
        - flex-shrink (when there isn't enough space, the item assigned should be shrunk; 1 is default)
        - can be in one line (e.g. flex: grow shrink basis)
